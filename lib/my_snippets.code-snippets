{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:

	"mainb": {
		"scope": "flutter,dart",
		"prefix": "mainb",
		"body": [
			"mainAxisAlignment: MainAxisAlignment.${2|spaceBetween,spaceAround,spaceEvenly,start,center,end|},"
		],
		"description": "mainb"
	},

	"maina": {
		"scope": "flutter,dart",
		"prefix": "maina",
		"body": [
			"mainAxisAlignment: MainAxisAlignment.${2|spaceAround,spaceBetween,spaceEvenly,start,center,end|},"
		],
		"description": "maina"
	},
	"mainc": {
		"scope": "flutter,dart",
		"prefix": "mainc",
		"body": [
			"mainAxisAlignment: MainAxisAlignment.${2|center,spaceBetween,spaceAround,spaceEvenly,start,end|},"
		],
		"description": "mainc"
	},
	
	"min": {
		"scope": "flutter,dart",
		"prefix": "min",
		"body": [
			"mainAxisSize: MainAxisSize.${2|min,max|},"
		],
		"description": "mainAxisSize"
	},


	"rtl": {
		"scope": "flutter,dart",
		"prefix": "rtl",
		"body": [
			"textDirection: TextDirection.rtl,"
		],
		"description": "rtl"
	},
	"ltr": {
		"scope": "flutter,dart",
		"prefix": "ltr",
		"body": [
			"textDirection: TextDirection.ltr,"
		],
		"description": "ltr"
	},


	"rtld": {
		"scope": "flutter,dart",
		"prefix": "rtld",
		"body": [
			"Directionality(",
			"textDirection: TextDirection.rtl,"
		],
		"description": "rtld"
	},
	"ltrd": {
		"scope": "flutter,dart",
		"prefix": "ltrd",
		"body": [
			"Directionality(",
			"textDirection: TextDirection.ltr,"
		],
		"description": "ltrd"
	},



	"sizeh": {
		"scope": "flutter,dart",
		"prefix": "sizeh",
		"body": [
			"SizedBox(height: $1),"
		],
		"description": "sizeh"
	},
	"sizehc": {
		"scope": "flutter,dart",
		"prefix": "sizeh",
		"body": [
			"const SizedBox(height: $1),"
		],
		"description": "sizeh"
	},

	"sizehd": {
		"scope": "flutter,dart",
		"prefix": "sizeh",
		"body": [
			"SizedBox(height: doubleHeight($1,$2screenHeight)),"
		],
		"description": "sizeh"
	},
	"sizehd1": {
		"scope": "flutter,dart",
		"prefix": "sizeh",
		"body": [
			"SizedBox(height: doubleHeight1($1)),"
		],
		"description": "sizeh"
	},

	"sizew": {
		"scope": "flutter,dart",
		"prefix": "sizew",
		"body": [
			"SizedBox(width: $1),"
		],
		"description": "sizew"
	},
	"sizewc": {
		"scope": "flutter,dart",
		"prefix": "sizew",
		"body": [
			"const SizedBox(width: $1),"
		],
		"description": "sizew"
	},

	"sizewd": {
		"scope": "flutter,dart",
		"prefix": "sizew",
		"body": [
			"SizedBox(width: doubleWidth($1,$2screenWidth)),"
		],
		"description": "sizew"
	},
	"sizewd1": {
		"scope": "flutter,dart",
		"prefix": "sizew",
		"body": [
			"SizedBox(width: doubleWidth1($1)),"
		],
		"description": "sizew"
	},



	"rad": {
		"scope": "flutter,dart",
		"prefix": "rad",
		"body": [
			"borderRadius: BorderRadius.circular($1),"
		],
		"description": "rad"
	},
	"cross": {
		"scope": "flutter,dart",
		"prefix": "cross",
		"body": [
			"crossAxisAlignment: CrossAxisAlignment.${2|start,center,end,stretch,baseline|},"
		],
		"description": "cross"
	},

	"inf": {
		"scope": "flutter,dart",
		"prefix": "inf",
		"body": [
			"double.maxFinite"
		],
		"description": "inf"
	},
	"non": {
		"scope": "flutter,dart",
		"prefix": "non",
		"body": [
			"const SizedBox.shrink(),"
		],
		"description": "non"
	},


	"border": {
		"scope": "flutter,dart",
		"prefix": "border",
		"body": [
			"border: Border.all(width: 1,color: Colors.black),"
		],
		"description": "border"
	},
	"box": {
		"scope": "flutter,dart",
		"prefix": "box",
		"body": [
			"Container(",
			    "decoration: BoxDecoration(",
			    "  border: Border.all(width: 1,color: Colors.black),",
			    "  borderRadius: BorderRadius.circular(10),",
			    "),",
			    "padding: EdgeInsets.symmetric(",
			    "  horizontal: doubleWidth(2, $2screenWidth),",
			    "  vertical: doubleHeight(0.5, $2screenHeight)",
			    "),",
			    "  child: $1,",
				"),"
		],
		"description": "box"
	},

	
	"convert": {
		"scope": "flutter,dart",
		"prefix": "convert",
		"body": [
			"convertData(data, '$1', DataType.string);"
		],
		"description": "convert"
	},
	"convert1": {
		"scope": "flutter,dart",
		"prefix": "convert",
		"body": [
			"$1=convertData(data, '$2', DataType.string);"
		],
		"description": "convert"
	},
	"convert2": {
		"scope": "flutter,dart",
		"prefix": "convert",
		"body": [
			"$1=convertData(data, '$1', DataType.string);"
		],
		"description": "convert"
	},

	"convertl": {
		"scope": "flutter,dart",
		"prefix": "convertl",
		"body": [
			"convertDataList<$2>(data, '$1', '$2');"
		],
		"description": "convertl"
	},
	"convertl2": {
		"scope": "flutter,dart",
		"prefix": "convertl",
		"body": [
			"$1=convertDataList<$2>(data, '$1', '$2');"
		],
		"description": "convertl"
	},
	"convertlraw": {
		"scope": "flutter,dart",
		"prefix": "convertl",
		"body": [
			"convertDataListRaw<$1>(data, '$1');"
		],
		"description": "convertl"
	},
	"convertlraw2": {
		"scope": "flutter,dart",
		"prefix": "convertl",
		"body": [
			"$1=convertDataListRaw<$1>(data, '$1');"
		],
		"description": "convertl"
	},

	"for": {
		"scope": "flutter,dart",
		"prefix": "for",
		"body": [
			"for(int j=0;j<$1.length;j++){",
			"",

			"}"
		],
		"description": "for"
	},


	"state_default": {
		"scope": "flutter,dart",
		"prefix": "default_state",
		"body": [
			"import 'package:flutter/material.dart';",
			"",
			"class $1State extends ChangeNotifier {",
			"",
			"void notify() => notifyListeners();",
			"",
			"init() {",
		  "",
			"}",
		  "}",
		],
		"description": "default_state"
	},
	"stful_my": {
		"scope": "flutter,dart",
		"prefix": "stful_my",
		"body": [
			"import 'package:flutter/material.dart';",
			
			"class $1 extends StatefulWidget {",
			"    const $1({Key? key}) : super(key: key);",
			"",
			"  @override",
			"  State<$1> createState() => _$1State();",
			"}",
			"",
			"class _$1State extends State<$1> {",
				"    @override",
				"    Widget build(BuildContext context) {",
					"    return Scaffold(",
					"        $2",
					"      );",
					"    }",
					"}"
		],
		"description": "stful_my"
	},
	"stful_res_my": {
		"scope": "flutter,dart",
		"prefix": "stful_res_my",
		"body": [
			"import 'package:flutter/material.dart';",
			"import 'package:tools/size.dart';",
			"",
			"class $1 extends StatefulWidget {",
			"    const $1({Key? key}) : super(key: key);",
			"",
			"  @override",
			"  State<$1> createState() => _$1State();",
			"}",
			"",
			"class _$1State extends State<$1> {",
				"    @override",
				"    Widget build(BuildContext context) {",
					"    return MySizer(builder: (context, widgets,",
					"    deviceType, screenWidth, screenHeight, realWidth, realHeight) {",
						"    return Scaffold(",
						"           $2",	
						"         ); ",
						"       },",
						"    );",
						"  }",
						"}",
			""
		],
		"description": "stful_res_my"
	},
	"stless_my": {
		"scope": "flutter,dart",
		"prefix": "stless_my",
		"body": [
			"import 'package:flutter/material.dart';",
			"",
			"class $1 extends StatelessWidget {",
				"    const $1({Key? key}) : super(key: key);",
			"",
			"  @override",
			  "  Widget build(BuildContext context) {",
				"    return Container();",
					"    }",
				  "}",
		],
		"description": "stless_my"
	},

	

	"inputDate": {
		"scope": "flutter,dart",
		"prefix": "inputDate",
		"body": [
			"DateTime? $1;"
		],
		"description": "inputDate"
	},
	"inputDateW": {
		"scope": "flutter,dart",
		"prefix": "inputDateW",
		"body": [
			"ToolsInputDate(",
              "text: '$1',",
              "screenWidth: screenWidth,",
              "screenHeight: screenHeight,",
              "onChange: (year, month, day) {",
                "DateTime tempDate = DateTime(year, month, day);",
                "$2 = tempDate;",
                "state.notify();",
              "},",
              "showText: $2 != null",
                  "? ToolsText(toolsmakeDate(",
                      "isJalali: false, date: $2))",
                  ": null),",
		],
		"description": "inputDateW"
	},


	"inputText": {
		"scope": "flutter,dart",
		"prefix": "inputText",
		"body": [
			"TextEditingController $1 = TextEditingController();"
		],
		"description": "inputText"
	},
	"inputTextW": {
		"scope": "flutter,dart",
		"prefix": "inputTextW",
		"body": [
			"ToolsInput(",
            	"textDirection: TextDirection.rtl,",
            	"controller: $2,",
            	"labelText: '$1',",
          	"),",
		],
		"description": "inputTextW"
	},
	"inputTextWN": {
		"scope": "flutter,dart",
		"prefix": "inputTextWN",
		"body": [
			"ToolsInput(",
            	"textDirection: TextDirection.rtl,",
				"decorDirection: TextDirection.rtl,",
				"keyboardType: TextInputType.number,",
            	"controller: $2,",
            	"labelText: '$1',",
          	"),",
		],
		"description": "inputTextWN"
	},


	"inputPopUp": {
		"scope": "flutter,dart",
		"prefix": "inputPopUp",
		"body": [
			"ToolsDataPopUp<String> $1 = ToolsDataPopUp(  ",
    			"['1', '2', '3', '4', '5'],",
    			"null,",
   				"enables: []",
  			");",
		],
		"description": "inputPopUp"
	},
	"inputPopUpW": {
		"scope": "flutter,dart",
		"prefix": "inputPopUpW",
		"body": [
			"ToolsPopUp<String>(",
              	"textDirection: TextDirection.rtl,",
              	"title: const Text('$1'),",
              	"screenWidth: screenWidth,",
              	"screenHeight: screenHeight,",
              	"data: $2,",
              	"onSelected: (String e) {",
                	"if ($2.enables.contains(e)) {",
                	"  $2.enables.remove(e);",
                	"} else {",
                	 " $2.enables.add(e);",
                	"}",
                	"state.notify();",
              "}),",
		],
		"description": "inputPopUpW"
	},


	"inputDropDown": {
		"scope": "flutter,dart",
		"prefix": "inputDropDown",
		"body": [
			"ToolsDataDropDown<String> $1 = ToolsDataDropDown(",
    			"['1', '2', '3', '4'],",
    			"null,",
  			");",
		],
		"description": "inputDropDown"
	},
	"inputDropDownW": {
		"scope": "flutter,dart",
		"prefix": "inputDropDownW",
		"body": [
			"ToolsDropDown<String>(",
              "isExpanded: true,",
              "hint: const Text('$1'),",
              "onChanged: (String e) {",
                "$2.value = e;",
                "state.notify();",
              "},",
              "data: $2),",
		],
		"description": "inputDropDownW"
	},


	"inputTwoData": {
		"scope": "flutter,dart",
		"prefix": "inputTwoData",
		"body": [
			"ToolsDataTwo<int> $1 = ToolsDataTwo(start: 1, end: 2);"
		],
		"description": "inputTwoData"
	},
	"inputTwoDataW": {
		"scope": "flutter,dart",
		"prefix": "inputTwoDataW",
		"body": [
			"ToolsInputTwoData(",
            "    screenWidth: screenWidth,",
            "    title: Text('$1',",
            "        style: toolstitleStyle(screenWidth: screenWidth, num: 3)),",
            "    onChangedStart: (e) {",
            "      $2.start = int.parse(e);",
            "    },",
            "    onChangedEnd: (e) {",
            "      $2.end = int.parse(e);",
            "    },",
          	"),",
		],
		"description": "inputTwoDataW"
	},


	"inputSwitch": {
		"scope": "flutter,dart",
		"prefix": "inputSwitch",
		"body": [
			"bool $1 = false;"
		],
		"description": "inputSwitch"
	},
	"inputSwitchW": {
		"scope": "flutter,dart",
		"prefix": "inputSwitchW",
		"body": [
			"ToolsSwitch(",
            "onChanged: (bool e) {",
            "  $2 = e;",
            "  state.notify();",
            "},",
            "value: $2,",
            "isMaterial: false,",
            "text: '$1',",
            "textStyle: toolstitleStyle(num: 3, screenWidth: screenWidth)",
            "    .copyWith(color: black1),",
          	"),",
		],
		"description": "inputSwitchW"
	},
	"consumer": {
		"scope": "flutter,dart",
		"prefix": "consumer",
		"body": [
			"return Consumer<$1State>(",
          "builder: (context, state, child) {",
			"$2",
          "},",
        ");"
		],
		"description": "consumer"
	},



	"default": {
		"scope": "flutter,dart",
		"prefix": "default",
		"body": [
			"default"
		],
		"description": "default"
	},
}